import os
import traceback
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.error import BadRequest

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN or not TOKEN.startswith("7691539168:"):
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
CHANNEL_USERNAME = "@PolarProperty"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
ADMIN_ID = os.getenv("ADMIN_ID")
if ADMIN_ID:
    try:
        ADMIN_ID = int(ADMIN_ID)
    except ValueError:
        print("‚ùå ADMIN_ID –≤ .env –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        ADMIN_ID = None
PDF_FILE_PATH = "catalog.pdf"  # –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
TEST_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ False –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    photo_url = "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
    text = (
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PolarPropertyBot!\n\n"
        "üîë –ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É, –¥–æ–º –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.\n"
        "üíº –†–∞–±–æ—Ç–∞–µ–º —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –ø–æ –≤—Å–µ–º—É –¢–∞–π–ª–∞–Ω–¥—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    keyboard = [
        [InlineKeyboardButton("üìÇ –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request")],
        [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.message.reply_photo(photo=photo_url, caption=text, reply_markup=reply_markup)
    except:
        await update.message.reply_text(text, reply_markup=reply_markup)

def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]])

async def is_user_subscribed(user_id, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}")
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        print(f"üìã –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {member.status}")
        is_subscribed = member.status in ["member", "administrator", "creator"]
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
        return is_subscribed
    except BadRequest as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def send_pdf_file(chat_id, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    try:
        if not os.path.exists(PDF_FILE_PATH):
            print(f"‚ùå –§–∞–π–ª {PDF_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ {PDF_FILE_PATH} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        with open(PDF_FILE_PATH, 'rb') as pdf_file:
            await context.bot.send_document(
                chat_id=chat_id,
                document=pdf_file,
                caption="üìò –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞."
            )
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        return False

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    if query.data == "catalog":
        is_subscribed = TEST_MODE or await is_user_subscribed(query.from_user.id, context)
        if is_subscribed:
            success = await send_pdf_file(query.message.chat.id, context)
            if success:
                await query.message.reply_text(
                    "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ò–∑—É—á–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
                    reply_markup=get_back_button()
                )
            else:
                await query.message.reply_text(
                    "‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
                    reply_markup=get_back_button()
                )
        else:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="catalog")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await query.edit_message_text(
                    f"‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                    reply_markup=reply_markup
                )
            except BadRequest:
                await query.message.reply_text(
                    f"‚ùóÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_USERNAME}\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                    reply_markup=reply_markup
                )

    elif query.data == "contact":
        try:
            await query.edit_message_text(
                "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
                "üë©‚Äçüíº –î–∏—Ä–µ–∫—Ç–æ—Ä: –õ—é–±–æ–≤—å –î–∞–Ω–∏–ª–æ–≤–∞\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
                "üì® Telegram: @lyubov_danilove\n"
                "üïí –†–∞–±–æ—Ç–∞–µ–º: –ü–ù-–ü–¢ 9:00-18:00",
                reply_markup=get_back_button()
            )
        except BadRequest:
            await query.message.reply_text(
                "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
                "üë©‚Äçüíº –î–∏—Ä–µ–∫—Ç–æ—Ä: –õ—é–±–æ–≤—å –î–∞–Ω–∏–ª–æ–≤–∞\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
                "üì® Telegram: @lyubov_danilove\n"
                "üïí –†–∞–±–æ—Ç–∞–µ–º: –ü–ù-–ü–¢ 9:00-18:00",
                reply_markup=get_back_button()
            )

    elif query.data == "request":
        await query.message.reply_text(
            "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ –ì–æ—Ä–æ–¥\n"
            "‚Ä¢ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n"
            "‚Ä¢ –ë—é–¥–∂–µ—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7999123456, –ú–æ—Å–∫–≤–∞, –∫–≤–∞—Ä—Ç–∏—Ä–∞ 2-–∫–æ–º–Ω, –¥–æ 15 –º–ª–Ω"
        )
        user_state[query.from_user.id] = "request"

    elif query.data == "question":
        await query.message.reply_text(
            "üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
            "–ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
            "–ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ª—é–±—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏."
        )
        user_state[query.from_user.id] = "question"

    elif query.data == "menu":
        photo_url = "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800"
        text = "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = [
            [InlineKeyboardButton("üìÇ –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä–µ–∫—Ç–æ–≤", callback_data="catalog")],
            [InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="request")],
            [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(text, reply_markup=reply_markup)
        except BadRequest:
            await query.message.reply_text(text, reply_markup=reply_markup)

async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã)"""
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = update.message.from_user.username or "–±–µ–∑ username"
    state = user_state.get(user_id)

    if state == "request":
        request_text = update.message.text
        await update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=get_back_button()
        )
        
        if ADMIN_ID:
            admin_message = (
                "üì• –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"üìù –ó–∞—è–≤–∫–∞: {request_text}\n"
                f"üïí –í—Ä–µ–º—è: {update.message.date.strftime('%d.%m.%Y %H:%M')}"
            )
            try:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_ID}. –û—à–∏–±–∫–∞: {e}")

    elif state == "question":
        question_text = update.message.text
        await update.message.reply_text(
            "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º!",
            reply_markup=get_back_button()
        )
        
        if ADMIN_ID:
            admin_message = (
                "‚ùì –ù–û–í–´–ô –í–û–ü–†–û–°\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
                f"üÜî ID: {user_id}\n"
                f"üí¨ –í–æ–ø—Ä–æ—Å: {question_text}\n"
                f"üïí –í—Ä–µ–º—è: {update.message.date.strftime('%d.%m.%Y %H:%M')}"
            )
            try:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            except:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {ADMIN_ID}")

    if state:
        user_state[user_id] = None

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    print(f"Exception while handling an update: {context.error}")
    print(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not os.path.exists(PDF_FILE_PATH):
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª {PDF_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω! –§—É–Ω–∫—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        # exit()  # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_error_handler(error_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()